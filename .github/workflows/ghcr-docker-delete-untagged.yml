name: Delete untagged Docker images on ghcr.io

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # Run on every 15th day-of-month at 10:15 AM UTC
  schedule:
    - cron: '15 10 */15 * *'
  # or on button click
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY_HOST: ghcr.io
  # Use github.repository (<account>/<repo>)
  REPOSITORY_NAME: ${{ github.repository }}
  # Use github.repository_owner (<account>)
  OWNER_NAME: ${{ github.repository_owner }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      parent: ${{ steps.set-matrix.outputs.parent }}
      platform: ${{ steps.set-matrix.outputs.platform }}

    steps:
      # Checkout a repository, so the workflow can access it
      # https://github.com/marketplace/actions/checkout
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Setting an output parameter between jobs and/or workflows
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
      - 
        id: set-json
        name: Get build matrix from file
        run: |

          # Specify path of matrix file
          JSON=docker/build/matrix.json
          echo ${JSON}

          # Passing filename between jobs and/or workflows
          echo "json=${JSON}" >> $GITHUB_OUTPUT

      - 
        id: set-matrix
        name: Set build matrix of releases, parent images and os/architectures
        run: |

          # Read matrix from file and set variables
          CONTENT=`cat ${{ steps.set-json.outputs.json }}`
          echo $CONTENT
          RELEASES=$(echo $CONTENT | jq ".release")
          echo $RELEASES
          PARENTS=$(echo $CONTENT | jq ".parent")
          echo $PARENTS
          PLATFORMS=$(echo $CONTENT | jq ".platform")
          echo $PLATFORMS

          # Passing matrix between jobs and/or workflows
          echo "release="${RELEASES} >> "$GITHUB_OUTPUT"
          echo "parent="${PARENTS} >> "$GITHUB_OUTPUT"
          echo "platform"=${PLATFORMS} >> "$GITHUB_OUTPUT"

  # check-setup:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       parent: ${{ fromJSON(needs.setup.outputs.parent) }}
  #   needs:
  #     - setup

  #   steps:
  #     - 
  #       name: Check build matrix
  #       run: |

  #         # Print current parent image and platforms
  #         echo "PARENT = ${{ matrix.parent }}"
  #         PLATFORM=${{ toJSON(needs.setup.outputs.platform) }}
  #         echo $PLATFORM
  #         # Remove square bracket, white spaces and double quotes
  #         PLATFORM=$(echo $PLATFORM | tr -d "[]| |\"")
  #         echo $PLATFORM

  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        image:
          - boca-web
          - boca-jail
    needs: setup

    steps:
      # Set up GitHub Actions workflow with a specific version of Go
      # https://github.com/marketplace/actions/setup-go-environment
      - 
        uses: actions/setup-go@v4
        with:
          go-version: 1.15

      # Install and setup crane
      # https://github.com/imjasonh/setup-crane
      - 
        uses: imjasonh/setup-crane@v0.3

      - 
        name: Compile versions/releases to ignore
        run: |

          # Get releases
          RELEASES=${{ toJSON(needs.setup.outputs.release) }}
          # Remove square brackets and double quotes
          RELEASES=$(echo $RELEASES | tr -d "[]|\"")
          # Split string into an array
          IFS=', ' read -r -a RELEASES <<< "$RELEASES"

          # Unset variable
          unset DIGESTKEYS

          # Iterate over releases to get digests
          for version in ${RELEASES[@]}
          do
            echo "${version}"

            # Set image
            IMG=${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/${{ matrix.image }}

            # If manifest does not exist just skip image
            MANIFEST=$(crane manifest ${IMG}:${version} || echo "")
            if [ -z "${MANIFEST}" ];
            then
              continue
            fi

            # Get digest key(s) of regular image (if not multi-arch)
            DIGESTKEYS="${DIGESTKEYS} \
              `crane manifest ${IMG}:${version} | \
                jq 'select (.config != null) | .config.digest'`"
            # or of multi-platform images builds
            DIGESTKEYS="${DIGESTKEYS} \
              `crane manifest ${IMG}:${version} | \
                jq 'select (.manifests != null) | .manifests[].digest'`"
          done

          # Remove newlines, tabs, carriage returns and double quotes
          DIGESTKEYS=$(echo $DIGESTKEYS | tr -d "\n\t\r|\"")
          # Replace whitespaces with '|'
          DIGESTKEYS="${DIGESTKEYS// /|}"
          echo $DIGESTKEYS

          # Passing env variable between steps
          echo "digest_keys=${DIGESTKEYS}" >> $GITHUB_ENV

      - 
        name: Write variable to GITHUB_ENV
        run: |

          OWNER='${{ env.OWNER_NAME }}'
          REPO='${{ env.REPOSITORY_NAME }}'
          # Remove owner from repository name
          PACKAGE=${REPO//$OWNER\//}
          echo "package_name=${PACKAGE}" >> $GITHUB_ENV

      # Delete versions of a package from GitHub Packages
      # https://github.com/marketplace/actions/delete-package-versions
      - 
        name: Delete deprecated Docker images on ghcr.io
        uses: actions/delete-package-versions@v4
        with:
          package-name: '${{ env.package_name }}/${{ matrix.image }}'
          package-type: 'container'
          delete-only-untagged-versions: 'true'
          ignore-versions: '${{ env.digest_keys }}'
          token: ${{ secrets.GITHUB_TOKEN }}
