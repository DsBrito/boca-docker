name: Build and publish multi-platform Docker images on ghcr.io

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub Actions Documentation
# https://docs.github.com/en/github-ae@latest/actions

# Reusing workflows
# https://docs.github.com/en/actions/using-workflows/reusing-workflows

on:
  workflow_call:
    inputs:
      images:
        description: "Matrix of images to build (i.e., boca-base, boca-web and boca-jail)"
        required: true
        type: string
      parents:
        description: 'Matrix of parent/base images used is builds'
        required: true
        type: string
      default_parent:
        description: 'Default parent/base image'
        required: true
        type: string
      platforms:
        description: "Matrix of target os/platform-specific (multi-arch)"
        required: true
        type: string
      tag:
        description: "Image tag"
        required: true
        type: string

# Save computation power by stopping obsolete jobs for the current workflow
# https://docs.github.com/en/enterprise-cloud@latest/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY_HOST: ghcr.io
  # Use github.repository (<account>/<repo>)
  REPOSITORY_NAME: ${{ github.repository }}
  # Use github.repository_owner (<account>)
  OWNER_NAME: ${{ github.repository_owner }}
  # Use GitHub local cache exporter
  DIGESTS_PATH: /tmp/digests

jobs:
  # Distribute build of each platform across multiple runners and push by digest
  build:
    runs-on: ubuntu-latest
    permissions:
      # for actions/checkout to fetch code
      contents: read
      # can upload and download package, as well as read/write package metadata
      packages: write
    strategy:
      # If is set to true (default), GitHub will cancel all in-progress and
      # queued jobs in the matrix if any job in the matrix fails.
      fail-fast: false
      matrix:
        image: ${{ fromJSON(inputs.images) }}
        parent: ${{ fromJSON(inputs.parents) }}
        platform: ${{ fromJSON(inputs.platforms) }}
    name: build (${{ matrix.image }}, ${{ matrix.parent }})

    steps:
      # Checkout a repository, so the workflow can access it
      # https://github.com/marketplace/actions/checkout
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Create and boot a builder that can be used in the following steps of
      # the workflow
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set environment variables and output parameters between steps
      # https://docs.github.com/en/github-ae@latest/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      - 
        name: Write variables to GITHUB_ENV
        id: setup
        run: |

          # Set OS release
          PARENT='${{ matrix.parent }}'
          # Replace 'ubuntu:' with ''
          RELEASE=${PARENT//ubuntu:/}
          echo $RELEASE
          echo "release_name=$RELEASE" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE" >> $GITHUB_ENV

          # Set architecture
          PLATFORM='${{ matrix.platform }}'
          # Replace 'linux/' with '' and '/' with '-'
          ARCH=${PLATFORM//linux\//}
          ARCH=${ARCH//\//-}
          echo $ARCH
          echo "arch_name=$ARCH" >> $GITHUB_OUTPUT

          # Set base image (used in build)
          if [[ '${{ matrix.image }}' == 'boca-base' ]];
          then
            BASE_IMAGE="${{ matrix.parent }}"
          else
            BASE_IMAGE="${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-base:${{ github.ref_name }}"
          fi
          echo $BASE_IMAGE
          echo "base_image=$BASE_IMAGE" >> $GITHUB_OUTPUT

          # Set image
          IMG='${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/${{ matrix.image }}'
          echo $IMG
          echo "image_name=$IMG" >> $GITHUB_OUTPUT
          echo "image=${{ matrix.image }}" >> $GITHUB_ENV

          # Set folder
          DIR='${{ matrix.image }}'
          # Remove 'boca-' from image name
          DIR=${DIR//boca-/}
          echo $DIR
          echo "folder_name=$DIR" >> $GITHUB_OUTPUT

          # Set digests path
          DIGESTS_PATH="${{ env.DIGESTS_PATH }}/${{ matrix.image }}-${RELEASE}"
          echo $DIGESTS_PATH
          echo "digests_path=$DIGESTS_PATH" >> $GITHUB_OUTPUT

          # Set the cache-to output
          # https://docs.docker.com/build/cache/backends/gha/
          echo "${{ github.ref_name }}-${{ matrix.image }}-$RELEASE-$ARCH"
          echo "cache-to=type=gha,scope=${{ github.ref_name }}-${{ matrix.image }}-$RELEASE-$ARCH" >> "${GITHUB_OUTPUT}"

          # Set the cache-from output
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo "${{ github.ref_name }}-${{ matrix.image }}-$RELEASE-$ARCH"
            echo "cache-from=type=gha,scope=${{ github.ref_name }}-${{ matrix.image }}-$RELEASE-$ARCH" >> "${GITHUB_OUTPUT}"
          else
            # Use cache from target branch too when building a pull request
            # In this case, it has to be a multiline string
            # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
            EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "cache-from<<${EOF}" >> "${GITHUB_OUTPUT}"
            printf '%s\n' \
              "type=gha,scope=${{ github.ref_name }}-${{ matrix.image }}-$RELEASE-$ARCH" \
              "type=gha,scope=${{ github.base_ref }}-${{ matrix.image }}-$RELEASE-$ARCH" \
              >> "${GITHUB_OUTPUT}"
            echo "${EOF}" >> "${GITHUB_OUTPUT}"
          fi

      # Login to a Docker registry (except on PR)
      # https://github.com/docker/login-action
      - 
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - 
        name: Extract Docker metadata (${{ matrix.image }})
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.setup.outputs.image_name }}

      - 
        name: Build and push image remotely (${{ matrix.image }})
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/dev/${{ steps.setup.outputs.folder_name }}/Dockerfile
          platforms: ${{ matrix.platform }}
          build-args: |
            BASE_IMAGE=${{ matrix.parent }}
          provenance: false
          outputs: type=image,name=${{ steps.setup.outputs.image_name }},push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            ${{ steps.setup.outputs.cache-from }}
          cache-to: |
            ${{ steps.setup.outputs.cache-to }}
    
      - name: Export digest
        run: |

          mkdir -p ${{ steps.setup.outputs.digests_path }}
          digest='${{ steps.build.outputs.digest }}'
          touch "${{ steps.setup.outputs.digests_path }}/${digest#sha256:}"

      # Upload artifacts from workflow allowing to share data between jobs
      # https://github.com/actions/upload-artifact
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests-${{ matrix.image }}-${{ steps.setup.outputs.release_name }}
          path: ${{ steps.setup.outputs.digests_path }}/*
          if-no-files-found: error
          retention-days: 1

  # This job creates a manifest list and push it to GitHub Container Registry.
  merge:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(inputs.images) }}
        parent: ${{ fromJSON(inputs.parents) }}
    needs:
      - build

    steps:
      - 
        name: Write variables to GITHUB_ENV
        id: setup
        run: |

          # Set OS release
          PARENT='${{ matrix.parent }}'
          # Replace 'ubuntu:' with ''
          RELEASE=${PARENT//ubuntu:/}
          echo $RELEASE
          echo "release_name=$RELEASE" >> $GITHUB_OUTPUT

          # Set image name
          IMG='${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/${{ matrix.image }}'
          echo $IMG
          echo "image_name=$IMG" >> $GITHUB_OUTPUT

          # Set digests path
          DIGESTS_PATH="${{ env.DIGESTS_PATH }}/${{ matrix.image }}-${RELEASE}"
          echo $DIGESTS_PATH
          echo "digests_path=$DIGESTS_PATH" >> $GITHUB_OUTPUT

      # Download artifacts that have been uploaded from previous jobs
      # https://github.com/actions/download-artifact
      -
        name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests-${{ matrix.image }}-${{ steps.setup.outputs.release_name }}
          path: ${{ steps.setup.outputs.digests_path }}

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - 
        name: Extract Docker metadata (${{ matrix.image }})
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.setup.outputs.image_name }}
          tags: |
            # nightly build
            type=schedule,pattern=nightly,suffix=-${{ steps.setup.outputs.release_name }}
            type=schedule,pattern=nightly,enable=${{ matrix.parent == inputs.default_parent }}
            # new release
            type=semver,pattern={{raw}},priority=900,suffix=-${{ steps.setup.outputs.release_name }}
            type=semver,pattern={{raw}},priority=1000,enable=${{ matrix.parent == inputs.default_parent }}
            type=semver,pattern={{major}}.{{minor}},priority=900,suffix=-${{ steps.setup.outputs.release_name }}
            type=semver,pattern={{major}}.{{minor}},priority=1000,enable=${{ matrix.parent == inputs.default_parent }}
            # tag event (same as new release)
            type=ref,event=tag,priority=900,suffix=-${{ steps.setup.outputs.release_name }}
            type=ref,event=tag,priority=1000,enable=${{ matrix.parent == inputs.default_parent }}
            # workflow_dispatch (debug)
            type=raw,value=${{ inputs.tag }},enable=${{ matrix.parent == inputs.default_parent && github.event_name == 'workflow_dispatch' }}
            type=raw,value=${{ inputs.tag }},suffix=-${{ steps.setup.outputs.release_name }},enable=${{ github.event_name == 'workflow_dispatch' }}
            # branch event
            type=ref,event=branch,priority=900,suffix=-${{ steps.setup.outputs.release_name }}
            type=ref,event=branch,priority=1000,enable=${{ matrix.parent == inputs.default_parent }}
          flavor: |
            latest=${{ matrix.parent == inputs.default_parent && github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}

      - 
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - 
        name: Create manifest list and push
        working-directory: ${{ steps.setup.outputs.digests_path }}
        run: |

          docker buildx imagetools create \
            $(jq -r '"-t " + (.tags | join(" -t "))' <<< '${{ steps.meta.outputs.json }}') \
              $(printf '${{ steps.setup.outputs.image_name }}@sha256:%s ' *)

      - 
        name: Inspect image
        run: |
      
          docker buildx imagetools inspect \
            '${{ steps.setup.outputs.image_name }}:${{ steps.meta.outputs.version }}'
