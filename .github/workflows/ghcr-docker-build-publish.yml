name: Build and publish multi-platform Docker images on ghcr.io (nightly/new release)

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub Actions Documentation
# https://docs.github.com/en/github-ae@latest/actions

on:
  # Run daily at 9:15 AM UTC (nightly builds)
  schedule:
    # Publish "nightly" build as release
    - cron: '15 9 * * *'
  push:
    # Publish semver tags as releases (e.g., 1.0.0)
    tags: [ '*.*.*' ]
  # or on button click
  # https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatch
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: 'Test scenario tag'
        required: true
        type: string

# Save computation power by stopping obsolete jobs for the current workflow
# https://docs.github.com/en/enterprise-cloud@latest/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY_HOST: ghcr.io
  # Use github.repository (<account>/<repo>)
  REPOSITORY_NAME: ${{ github.repository }}
  # Use github.repository_owner (<account>)
  OWNER_NAME: ${{ github.repository_owner }}
  # Use GitHub local cache exporter
  REGISTRY_PATH: ${{ github.workspace }}/registry
  CACHE_PATH: /tmp/.buildx-cache

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      parent: ${{ steps.set-matrix.outputs.parent }}
      default_parent: ${{ steps.set-matrix.outputs.default_parent }}
      platform: ${{ steps.set-matrix.outputs.platform }}

    steps:
      # Checkout a repository, so the workflow can access it
      # https://github.com/marketplace/actions/checkout
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Setting an output parameter between jobs and/or workflows
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
      - 
        id: set-json
        name: Get build matrix from file
        run: |

          # Specify path of matrix file
          JSON=docker/build/matrix.json
          echo "json=${JSON}" >> $GITHUB_OUTPUT
          echo ${JSON}

      - 
        id: set-matrix
        name: Set build matrix of releases, parent images and os/architectures
        run: |

          # Read matrix from file and set variables
          CONTENT=`cat ${{ steps.set-json.outputs.json }}`
          echo $CONTENT
          RELEASES=$(echo $CONTENT | jq ".release")
          echo $RELEASES
          PARENTS=$(echo $CONTENT | jq ".parent")
          echo $PARENTS
          PLATFORMS=$(echo $CONTENT | jq ".platform")
          echo $PLATFORMS

          # Remove square brackets and double quotes
          DEFAULTPARENT=$(echo $PARENTS | tr -d "[]|\"")
          # Split string into an array
          IFS=', ' read -r -a DEFAULTPARENT <<< "$DEFAULTPARENT"
          # Set base image (parent) as the first value of the array
          DEFAULTPARENT=${DEFAULTPARENT[0]}
          echo $DEFAULTPARENT

          # Passing matrix between jobs and/or workflows
          echo "release="${RELEASES} >> "$GITHUB_OUTPUT"
          echo "parent="${PARENTS} >> "$GITHUB_OUTPUT"
          echo "default_parent=${DEFAULTPARENT}" >> "$GITHUB_OUTPUT"
          echo "platform"=${PLATFORMS} >> "$GITHUB_OUTPUT"

  # check-setup:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       parent: ${{ fromJSON(needs.setup.outputs.parent) }}
  #   needs:
  #     - setup

  #   steps:
  #     - 
  #       name: Check build matrix
  #       run: |

  #         # Print current parent image, default parent and platforms
  #         echo "${{ matrix.parent }}"
  #         DEFAULTPARENT=${{ toJSON(needs.setup.outputs.default_parent) }}
  #         echo $DEFAULTPARENT
  #         PLATFORM=${{ toJSON(needs.setup.outputs.platform) }}
  #         echo $PLATFORM
  #         # Remove square bracket, white spaces and double quotes
  #         PLATFORM=$(echo $PLATFORM | tr -d "[]| |\"")
  #         echo $PLATFORM

  build-base:
    runs-on: ubuntu-latest
    permissions:
      # for actions/checkout to fetch code
      contents: read
      # can upload and download package, as well as read/write package metadata
      packages: write
    strategy:
      matrix:
        parent: ${{ fromJSON(needs.setup.outputs.parent) }}
    needs:
      - setup
    name: build (boca-base, ${{ matrix.parent}})

    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Create and boot a builder that can be used in the following steps of
      # the workflow
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # Set environment variables (NOTE: alternatively could have used an
      # output parameter between steps, see above)
      # https://docs.github.com/en/github-ae@latest/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      - 
        name: Write variables to GITHUB_ENV
        run: |

          PARENT='${{ matrix.parent }}'
          # Replace 'ubuntu:' with ''
          PARENT=${PARENT//ubuntu:/}
          echo $PARENT
          echo "flavor_name=$PARENT" >> $GITHUB_ENV

          PLATFORM=${{ toJSON(needs.setup.outputs.platform) }}
          # Remove square bracket, white spaces and double quotes
          PLATFORM=$(echo $PLATFORM | tr -d "[]| |\"")
          echo $PLATFORM
          echo "platforms=$PLATFORM" >> $GITHUB_ENV

      - 
        name: Start local Docker registry
        run: |

          docker run --rm --detach --publish 5000:5000 \
            --volume ${REGISTRY_PATH}/boca-base-${flavor_name}:/var/lib/registry \
            --name registry registry:2

      # Cache storage backends with GitHub Actions
      # https://github.com/actions/cache
      -
        name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_PATH }}/boca-base-${{ env.flavor_name }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - 
        name: Extract Docker metadata (boca-base)
        id: meta_base
        uses: docker/metadata-action@v4
        with:
          images: localhost:5000/${{ env.REPOSITORY_NAME }}/boca-base

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - 
        name: Build and push image locally (boca-base)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/dev/base/Dockerfile
          platforms: ${{ env.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ matrix.parent }}
          cache-from: type=local,src=${{ env.CACHE_PATH }}/boca-base-${{ env.flavor_name }}
          cache-to: type=local,dest=${{ env.CACHE_PATH }}/boca-base-${{ env.flavor_name }}-new,mode=max

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |

          rm -rf ${{ env.CACHE_PATH }}/boca-base-${{ env.flavor_name }}
          mv ${{ env.CACHE_PATH }}/boca-base-${{ env.flavor_name }}-new ${{ env.CACHE_PATH }}/boca-base-${{ env.flavor_name }}

      - name: Stop local Docker registry
        run: |

          docker stop registry

      # Upload artifacts from workflow allowing to share data between jobs
      # https://github.com/actions/upload-artifact
      - 
        name: Upload Docker registry data for boca-web and boca-jail jobs
        uses: actions/upload-artifact@v3
        with:
          name: docker-registry-data
          path: ${{ env.REGISTRY_PATH }}/boca-base-${{ env.flavor_name }}/

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        image:
          - boca-web
          - boca-jail
        parent: ${{ fromJSON(needs.setup.outputs.parent) }}
    needs:
      - setup
      - build-base

    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - 
        name: Write variables to GITHUB_ENV
        run: |

          PARENT='${{ matrix.parent }}'
          # Replace 'ubuntu:' with ''
          PARENT=${PARENT//ubuntu:/}
          echo $PARENT
          echo "flavor_name=$PARENT" >> $GITHUB_ENV

          DEFAULTPARENT=${{ toJSON(needs.setup.outputs.default_parent) }}
          echo $DEFAULTPARENT
          echo "default_parent=$DEFAULTPARENT" >> $GITHUB_ENV

          PLATFORM=${{ toJSON(needs.setup.outputs.platform) }}
          # Remove square bracket, white spaces and double quotes
          PLATFORM=$(echo $PLATFORM | tr -d "[]| |\"")
          echo $PLATFORM
          echo "platforms=$PLATFORM" >> $GITHUB_ENV

          DIR='${{ matrix.image }}'
          # Remove 'boca-' from image name
          DIR=${DIR//boca-/}
          echo $DIR
          echo "folder_name=$DIR" >> $GITHUB_ENV

      # Download artifacts that have been uploaded from previous jobs
      # https://github.com/actions/download-artifact
      -
        name: Download Docker registry data from build-base job
        uses: actions/download-artifact@v3
        with:
          name: docker-registry-data
          path: ${{ env.REGISTRY_PATH }}/boca-base-${{ env.flavor_name }}/

      - 
        name: Start local Docker registry
        run: |

          docker run --rm --detach --publish 5000:5000 \
            --volume ${REGISTRY_PATH}/boca-base-${flavor_name}:/var/lib/registry \
            --name registry registry:2

      -
        name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHE_PATH }}/${{ matrix.image }}-${{ env.flavor_name }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Login to a Docker registry (except on PR)
      # https://github.com/docker/login-action
      - 
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - 
        name: Extract Docker metadata (boca-base)
        id: meta_base
        uses: docker/metadata-action@v4
        with:
          images: localhost:5000/${{ env.REPOSITORY_NAME }}/boca-base

      - 
        name: Extract Docker metadata (${{ matrix.image }})
        id: meta_image
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/${{ matrix.image }}
          tags: |
            # nightly build
            type=schedule,pattern=nightly,suffix=-${{ env.flavor_name }}
            type=schedule,pattern=nightly,enable=${{ matrix.parent == env.default_parent }}
            # new release
            type=semver,pattern={{raw}},priority=900,suffix=-${{ env.flavor_name }}
            type=semver,pattern={{raw}},priority=1000,enable=${{ matrix.parent == env.default_parent }}
            type=semver,pattern={{major}}.{{minor}},priority=900,suffix=-${{ env.flavor_name }}
            type=semver,pattern={{major}}.{{minor}},priority=1000,enable=${{ matrix.parent == env.default_parent }}
            # tag event (same as new release)
            type=ref,event=tag,priority=900,suffix=-${{ env.flavor_name }}
            type=ref,event=tag,priority=1000,enable=${{ matrix.parent == env.default_parent }}
            # workflow_dispatch (debug)
            type=raw,value=${{ inputs.tags }},enable=${{ matrix.parent == env.default_parent && github.event_name == 'workflow_dispatch' }}
            type=raw,value=${{ inputs.tags }},suffix=-${{ env.flavor_name }},enable=${{ github.event_name == 'workflow_dispatch' }}
            # branch event
            type=ref,event=branch,priority=900,suffix=-${{ env.flavor_name }}
            type=ref,event=branch,priority=1000,enable=${{ matrix.parent == env.default_parent }}
          # This identifies which variant will be published as "latest", which
          # isn't necessarily the newest version of the source code
          flavor: |
            latest=${{ matrix.parent == env.default_parent && github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}

      - 
        name: Build and push image remotely (${{ matrix.image }})
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/dev/${{ env.folder_name }}/Dockerfile
          platforms: ${{ env.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta_image.outputs.tags }}
          labels: ${{ steps.meta_image.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ steps.meta_base.outputs.tags }}
          provenance: false
          cache-from: type=local,src=${{ env.CACHE_PATH }}/${{ matrix.image }}-${{ env.flavor_name }}
          cache-to: type=local,dest=${{ env.CACHE_PATH }}/${{ matrix.image }}-${{ env.flavor_name }}-new,mode=max

      -
        name: Move cache
        run: |

          rm -rf ${{ env.CACHE_PATH }}/${{ matrix.image }}-${{ env.flavor_name }}
          mv ${{ env.CACHE_PATH }}/${{ matrix.image }}-${{ env.flavor_name }}-new ${{ env.CACHE_PATH }}/${{ matrix.image }}-${{ env.flavor_name }}

      - name: Stop local Docker registry
        run: |

          docker stop registry

  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # for github/codeql-action/upload-sarif to upload SARIF results
      security-events: write
      # only required for a private repository by github/codeql-action/upload-sarif 
      # to get the Action run status
      actions: read
    strategy:
      matrix:
        image:
          - boca-web
          - boca-jail
        parent: ${{ fromJSON(needs.setup.outputs.parent) }}
        platform: ${{ fromJSON(needs.setup.outputs.platform) }}
    needs:
      - setup
      - build

    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - 
        name: Write variables to GITHUB_ENV
        run: |

          PARENT='${{ matrix.parent }}'
          # Replace 'ubuntu:' with ''
          PARENT=${PARENT//ubuntu:/}
          echo $PARENT

          IMG=${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/${{ matrix.image }}:${{github.ref_name}}-$PARENT
          echo $IMG
          echo "image_name=$IMG" >> $GITHUB_ENV

          PLATFORM='${{ matrix.platform }}'
          # Replace '/' with '-'
          PLATFORM=${PLATFORM//\//-}
          echo $PLATFORM
          echo "platform_name=$PLATFORM" >> $GITHUB_ENV

      -
        name: Pull Docker image from ghcr.io
        run: |
        
          docker pull --platform ${{ matrix.platform }} ${{ env.image_name }}
          docker image ls -a

      # Run Trivy vulnerability scanner on image
      # https://github.com/marketplace/actions/aqua-security-trivy
      - 
        name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.image_name }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}-${{ env.platform_name }}-image-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: 10m

      # Upload results to GitHub so they can be displayed in the repository' security tab
      # https://github.com/github/codeql-action
      - 
        name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.image }}-${{ env.platform_name }}-image-results.sarif'
          category: 'image'
