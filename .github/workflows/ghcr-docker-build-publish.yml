name: Build and publish multi-platform Docker images on ghcr.io (nightly/new release)

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # Run daily at 9:15 AM UTC (nightly builds)
  schedule:
    # Publish "nightly" build as release
    - cron: '15 9 * * *'
  push:
    # Publish semver tags as releases (e.g., 1.0.0)
    tags: [ '*.*.*' ]
  # or on button click
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY_HOST: ghcr.io
  # Use github.repository (<account>/<repo>)
  REPOSITORY_NAME: ${{ github.repository }}
  # Use github.repository_owner (<account>)
  OWNER_NAME: ${{ github.repository_owner }}
  # Set Ubuntu base release
  BASE_RELEASE: "ubuntu:jammy"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-matrix.outputs.release }}
      platform: ${{ steps.set-matrix.outputs.platform }}

    steps:
      # Checkout a repository, so the workflow can access it
      # https://github.com/marketplace/actions/checkout
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Setting an output parameter between jobs and/or workflows
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
      - 
        id: set-json
        name: Get build matrix from file
        run: |

          # Specify path of matrix file
          JSON=docker/build/matrix.json
          echo "json=${JSON}" >> $GITHUB_OUTPUT
          echo ${JSON}

      - 
        id: set-matrix
        name: Set build matrix of base releases and architectures
        run: |

          # In case jq is not installed
          # apt-get update -y
          # apt-get install -y jq

          # Read matrix from file and set variables
          CONTENT=`cat ${{ steps.set-json.outputs.json }}`
          echo $CONTENT
          RELEASES=$(echo $CONTENT | jq ".release")
          echo $RELEASES
          PLATFORMS=$(echo $CONTENT | jq ".platform")
          echo $PLATFORMS
          # Remove square bracket, white spaces and double quotes
          PLATFORMS=$(echo $PLATFORMS | tr -d "[]| |\"")
          # Passing matrix between jobs and/or workflows
          echo "release="${RELEASES} >> "$GITHUB_OUTPUT"
          echo "platform=${PLATFORMS}" >> "$GITHUB_OUTPUT"

  # check-setup:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       release: ${{ fromJSON(needs.setup.outputs.release) }}
  #   needs:
  #     - setup

  #   steps:
  #     - 
  #       name: Check build matrix
  #       run: |

  #         # In case jq is not installed
  #         apt-get update -y
  #         apt-get install -y jq

  #         # Print current release and platforms
  #         echo "release = ${{ matrix.release }}"
  #         platform=${{ toJSON(needs.setup.outputs.platform) }}
  #         echo $platform

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        image:
          - boca-web
          # - boca-jail
        release: ${{ fromJSON(needs.setup.outputs.release) }}
    needs:
      - setup
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Create and boot a builder that can be used in the following steps of the workflow
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      # Cache storage backends with GitHub Actions
      # https://github.com/actions/cache
      -
        name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login to a Docker registry (except on PR)
      # https://github.com/docker/login-action
      - 
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - 
        name: Extract Docker metadata (boca-base)
        id: meta_base
        uses: docker/metadata-action@v4
        with:
          images: localhost:5000/${{ env.REPOSITORY_NAME }}/boca-base

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - 
        name: Build and push image locally (boca-base)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/dev/base/Dockerfile
          platforms: ${{ toJSON(needs.setup.outputs.platform) }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ matrix.release }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Set an environment variable
      # https://docs.github.com/en/github-ae@latest/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      - 
        name: Write FLAVOR_NAME variable to GITHUB_ENV
        run: |
          release='${{ matrix.release }}'
          # Replace 'ubuntu:' with ''
          echo "FLAVOR_NAME=${release//ubuntu:/}" >> $GITHUB_ENV

      - 
        name: Extract Docker metadata (${{ matrix.image }})
        id: meta_image
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/${{ matrix.image }}
          tags: |
            # nightly build
            type=schedule,pattern=nightly,suffix=-${{ env.FLAVOR_NAME }}
            type=schedule,pattern=nightly,enable=${{ matrix.release == env.BASE_RELEASE }}
            # new release
            type=semver,pattern={{raw}},priority=900,suffix=-${{ env.FLAVOR_NAME }}
            type=semver,pattern={{raw}},priority=1000,enable=${{ matrix.release == env.BASE_RELEASE }}
            type=semver,pattern={{major}}.{{minor}},priority=900,suffix=-${{ env.FLAVOR_NAME }}
            type=semver,pattern={{major}}.{{minor}},priority=1000,enable=${{ matrix.release == env.BASE_RELEASE }}
            # branch event
            type=ref,event=branch,priority=900,suffix=-${{ env.FLAVOR_NAME }}
            type=ref,event=branch,priority=1000,enable=${{ matrix.release == env.BASE_RELEASE }}
            # tag event
            type=ref,event=tag,priority=900,suffix=-${{ env.FLAVOR_NAME }}
            type=ref,event=tag,priority=1000,enable=${{ matrix.release == env.BASE_RELEASE }}
          # This identifies which variant will be published as "latest", which isn't
          # necessarily the newest version of the source code
          flavor: |
            latest=${{ matrix.release == env.BASE_RELEASE && github.event_name == 'release' }}

      - 
        name: Write FOLDER_NAME variable to GITHUB_ENV
        run: |
          dir='${{ matrix.image }}'
          # Remove 'boca-' from image name
          echo "FOLDER_NAME=${dir//boca-/}" >> $GITHUB_ENV

      - 
        name: Build and push image remotely (${{ matrix.image }})
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/dev/${{ env.FOLDER_NAME }}/Dockerfile
          platforms: ${{ toJSON(needs.setup.outputs.platform) }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta_image.outputs.tags }}
          labels: ${{ steps.meta_image.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ steps.meta_base.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  #     - 
  #       name: Normalize and write PLATFORM_NAME variable to GITHUB_ENV
  #       run: |
  #         platform='${{ matrix.platform }}'
  #         # Replace '/' with '-'
  #         echo "PLATFORM_NAME=${platform//\//-}" >> $GITHUB_ENV

  #     - 
  #       name: Build and export image to file (${{ matrix.image }})
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: docker/dev/${{ env.FOLDER_NAME }}/Dockerfile
  #         platforms: ${{ matrix.platform }}
  #         tags: ${{ matrix.image }}_${{ env.PLATFORM_NAME }}
  #         build-args: |
  #           BASE_IMAGE=${{ steps.meta_base.outputs.tags }}
  #         outputs: type=docker,dest=/tmp/${{ matrix.image }}_${{ env.PLATFORM_NAME }}.tar
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     # Upload images allowing to share them between jobs
  #     # https://github.com/actions/upload-artifact
  #     -
  #       name: Upload image (${{ matrix.image }})
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.image }}_${{ env.PLATFORM_NAME }}
  #         path: /tmp/${{ matrix.image }}_${{ env.PLATFORM_NAME }}.tar
  #         retention-days: 7

  # scan:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     # for actions/checkout to fetch code
  #     contents: read
  #     # for github/codeql-action/upload-sarif to upload SARIF results
  #     security-events: write
  #     # only required for a private repository by github/codeql-action/upload-sarif 
  #     # to get the Action run status
  #     actions: read
  #   strategy:
  #     matrix:
  #       image:
  #         - boca-web
  #         # - boca-jail
  #       platform:
  #         - linux/amd64
  #         # - linux/arm/v7
  #         # - linux/arm64/v8
  #         # - linux/ppc64le
  #         # - linux/s390x
  #   needs: build

  #   steps:
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - 
  #       name: Normalize and write PLATFORM_NAME variable to GITHUB_ENV
  #       run: |
  #         platform='${{ matrix.platform }}'
  #         # Replace '/' with '-'
  #         echo "PLATFORM_NAME=${platform//\//-}" >> $GITHUB_ENV

  #     # Download artifact from build
  #     # https://github.com/actions/download-artifact
  #     -
  #       name: Download artifact (Docker image)
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: '${{ matrix.image }}_${{ env.PLATFORM_NAME }}'
  #         path: /tmp

  #     -
  #       name: Load Docker image from file
  #       run: |
  #         docker load --input /tmp/${{ matrix.image }}_${{ env.PLATFORM_NAME }}.tar
  #         docker image ls -a

  #     # Run Trivy vulnerability scanner on image
  #     # https://github.com/marketplace/actions/aqua-security-trivy
  #     - 
  #       name: Run Trivy vulnerability scanner on image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ matrix.image }}_${{ env.PLATFORM_NAME }}'
  #         platform: '${{ matrix.platform }}'
  #         format: 'sarif'
  #         output: 'trivy-${{ matrix.image }}-${{ env.PLATFORM_NAME }}-image-results.sarif'
  #         ignore-unfixed: true
  #         vuln-type: 'os,library'
  #         severity: 'CRITICAL,HIGH'
  #         timeout: 10m

  #     # Upload results to GitHub so they can be displayed in the repository' security tab
  #     # https://github.com/github/codeql-action
  #     - 
  #       name: Upload Trivy image scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-${{ matrix.image }}-${{ env.PLATFORM_NAME }}-image-results.sarif'
  #         category: 'image'

  # Ensure that the repository is given Admin access by going on
  # Package settings -> Manage Actions access
  # https://github.com/actions/delete-package-versions/issues/74
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        image:
          - boca-web
          - boca-jail
    needs: build

    steps:
      - 
        name: Write PACKAGE_NAME variable to GITHUB_ENV
        run: |
          owner='${{ env.OWNER_NAME }}'
          repo='${{ env.REPOSITORY_NAME }}'
          # Remove owner from repository name
          echo "PACKAGE_NAME=${repo//$owner\//}" >> $GITHUB_ENV

      # Delete versions of a package from GitHub Packages
      # https://github.com/marketplace/actions/delete-package-versions
      - 
        name: Delete untagged Docker images on ghcr.io
        uses: actions/delete-package-versions@v4
        with: 
          package-name: '${{ env.PACKAGE_NAME }}/${{ matrix.image }}'
          package-type: 'container'
          token: ${{ secrets.GITHUB_TOKEN }}
          min-versions-to-keep: 5
          delete-only-untagged-versions: 'true'
