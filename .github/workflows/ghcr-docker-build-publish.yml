name: Build and publish Docker images on ghcr.io (nightly/new release)

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # Run daily at 9:15 AM UTC (nightly builds)
  schedule:
    # Publish "nightly" build as release
    - cron: '15 9 * * *'
  push:
    # Publish semver tags as releases (e.g., 1.0.0)
    tags: [ '*.*.*' ]
  # or on button click
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY_HOST: ghcr.io
  # Use github.repository (<account>/<repo>)
  REPOSITORY_NAME: ${{ github.repository }}
  # Use github.repository_owner (<account>)
  OWNER_NAME: ${{ github.repository_owner }}

jobs:
  build:
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v7
#           - linux/arm64/v8
#           - linux/ppc64le
#           - linux/s390x
    runs-on: ubuntu-latest

    steps:
      # Checkout a repository, so the workflow can access it
      # https://github.com/marketplace/actions/checkout
      - 
        name: Checkout repository
        uses: actions/checkout@v3

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Create and boot a builder that can be used in the following steps of the workflow
      # https://github.com/docker/setup-buildx-action
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to a Docker registry (except on PR)
      # https://github.com/docker/login-action
      - 
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - 
        name: Extract Docker metadata (boca-base)
        id: meta_base
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-base

      - 
        name: Extract Docker metadata (boca-web)
        id: meta_web
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-web

      - 
        name: Extract Docker metadata (boca-jail)
        id: meta_jail
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-jail

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - 
        name: Build and push image (boca-base)
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: docker/dev/base/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - 
        name: Build and push image (boca-web)
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: docker/dev/web/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_web.outputs.tags }}
          labels: ${{ steps.meta_web.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-base:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

#       - 
#         name: Build and push image (boca-jail)
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: docker/dev/jail/Dockerfile
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta_jail.outputs.tags }}
#           labels: ${{ steps.meta_jail.outputs.labels }}
#           build-args: |
#             BASE_IMAGE=${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-base:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

      # - 
      #   name: Build and export image to file (boca-base)
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     file: docker/dev/base/Dockerfile
      #     tags: boca-base
      #     outputs: type=docker,dest=/tmp/boca-base.tar
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - 
        name: Build and export image to file (boca-web)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/dev/web/Dockerfile
          tags: boca-web
          build-args: |
            BASE_IMAGE=${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-base:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
          outputs: type=docker,dest=/tmp/boca-web.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

#       - 
#         name: Build and export image to file (boca-jail)
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: docker/dev/jail/Dockerfile
#           tags: boca-jail
#           build-args: |
#             BASE_IMAGE=${{ env.REGISTRY_HOST }}/${{ env.REPOSITORY_NAME }}/boca-base:${{ env.DOCKER_METADATA_OUTPUT_VERSION }}
#           outputs: type=docker,dest=/tmp/boca-jail.tar
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

      # Upload images allowing to share them between jobs
      # https://github.com/actions/upload-artifact
      # -
      #   name: Upload image (boca-base)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: boca-base
      #     path: /tmp/boca-base.tar
      #     retention-days: 7

      -
        name: Upload image (boca-web)
        uses: actions/upload-artifact@v3
        with:
          name: boca-web
          path: /tmp/boca-web.tar
          retention-days: 7

#       -
#         name: Upload image (boca-jail)
#         uses: actions/upload-artifact@v3
#         with:
#           name: boca-jail
#           path: /tmp/boca-jail.tar
#           retention-days: 7

  scan:
    permissions:
      # for actions/checkout to fetch code
      contents: read
      # for github/codeql-action/upload-sarif to upload SARIF results
      security-events: write
      # only required for a private repository by github/codeql-action/upload-sarif 
      # to get the Action run status
      actions: read
    strategy:
      matrix:
        image: [boca-web]
    runs-on: ubuntu-latest
    needs: build

    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Download artifact from build
      # https://github.com/actions/download-artifact
      -
        name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.image }}
          path: /tmp

      -
        name: Load Docker image
        run: |
          docker load --input /tmp/${{ matrix.image }}.tar
          docker image ls -a

      # Run Trivy vulnerability scanner on image
      # https://github.com/marketplace/actions/aqua-security-trivy
      - 
        name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.image }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}-image-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          timeout: 10m

      # Upload results to GitHub so they can be displayed in the repository' security tab
      # https://github.com/github/codeql-action
      - 
        name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.image }}-image-results.sarif'
          category: 'image'

  # Ensure that the repository is given Admin access by going on
  # Package settings -> Manage Actions access
  # https://github.com/actions/delete-package-versions/issues/74
  cleanup:
    permissions:
      packages: write
    strategy:
      matrix:
        image: [boca-web]
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Set an environment variable
      # https://docs.github.com/en/github-ae@latest/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      - 
        name: Write PROJECT_NAME variable to GITHUB_ENV
        run: |
          owner='${{ env.OWNER_NAME }}'
          repo='${{ env.REPOSITORY_NAME }}'
          echo "PROJECT_NAME=${repo//$owner\//}" >> $GITHUB_ENV

      # Delete versions of a package from GitHub Packages
      # https://github.com/marketplace/actions/delete-package-versions
      - 
        name: Delete untagged Docker images on ghcr.io
        uses: actions/delete-package-versions@v4
        with: 
          package-name: '${{ env.PROJECT_NAME }}/${{ matrix.image }}'
          package-type: 'container'
          token: ${{ secrets.GITHUB_TOKEN }}
          min-versions-to-keep: 0
          delete-only-untagged-versions: 'true'
